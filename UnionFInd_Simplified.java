import java.util.HashMap;public class UnionFInd_Simplified {	HashMap<Integer, Integer> father;	// For 1-Dimension data	UnionFInd_Simplified(int len){		father = new HashMap<Integer, Integer>();		for(int i = 0; i < len; i++){			father.put(i, i);		}	}	// For 2-Dimension data, convert to 1-Dimension first	UnionFInd_Simplified(int m, int n){        father = new HashMap<Integer, Integer>();        for(int i = 0; i < m; i++){            for(int j = 0; j < n; j++){                int idx = convertIdx(i,j,n);                father.put(idx, idx);            }        }    }        public int find(int x){        int parent = father.get(x);        while(parent != father.get(parent)){            parent = father.get(parent);        }        int next = x;        // Compress path        while(next != parent){            int tmp = father.get(next);            father.put(next, parent);            next = tmp;        }        return parent;    }        public void union(int x, int y){        int p1 = find(x);        int p2 = find(y);        if(p1 != p2) father.put(p2, p1);    }        private int convertIdx(int x, int y, int col){        return x*col+y;    }}